Description: Update the language files with the latest from upstream
Author: Paul Gevers <paul@climbing.nl>
Forwarded: not-needed
Origin: http://code.google.com/p/winff/source/detail?r=639

Index: winff-git/unit1.pas
===================================================================
--- winff-git.orig/unit1.pas	2012-05-27 14:13:44.277977210 +0200
+++ winff-git/unit1.pas	2012-05-27 14:13:47.401992699 +0200
@@ -310,7 +310,8 @@
   rsPressEnter = 'Press Enter to Continue';
   rsCouldNotFindFile = 'Could Not Find File';
   rsInvalidPreset = 'Invalid Preset File';
-  rsPresetAlreadyExist = 'Preset: %s%s%s already exists';
+  rsReplacePreset = 'Replace Preset?';
+  rsPresetAlreadyExist = 'Preset: %s%s%s already exists. Do you want to replace the current preset?';
   rsPresetHasNoLabel = 'The preset to import does not have a label';
   rsThePresetHasIllegalChars = 'The preset contains illegal characters';
   rsPresetWithLabelExists = 'Preset with label: %s%s%s already exists';
@@ -2219,12 +2220,12 @@
 
    if nodeexists then
      begin
-       if replaceall=false then reply :=  MessageDlg ('Replace Preset', Format(rsPresetAlreadyExist, ['"', nodename, '"']),
-                                            mtConfirmation, [mbYes, mbNo, mbAll, mbCancel],0);
+       if replaceall=false then reply :=  MessageDlg (rsReplacePreset, Format(rsPresetAlreadyExist, ['"', nodename, '"']),
+                                            mtConfirmation, [mbYes, mbNo, mbYesToAll, mbCancel],0);
        if reply=mrCancel then exit;
        if reply=mrNo then continue;
-       if reply=mrAll then replaceall := true;
-       if (reply=mrYes) or (reply = mrAll) or (replaceall = true) then removepreset:=true;
+       if reply=mrYesToAll then replaceall := true;
+       if (reply=mrYes) or (reply = mrYesToAll) or (replaceall = true) then removepreset:=true;
        if removepreset then presets.RemoveChild(presets.FindNode(nodename));
      end;
 
@@ -2232,7 +2233,7 @@
      nodelabel := node.FindNode('label').FindNode('#text').NodeValue;
    except
      begin
-       showmessage(rsPresethasnolabel);
+       showmessage(rsPresetHasNoLabel);
        exit;
      end;
    end;
@@ -2282,7 +2283,6 @@
    textl:=presetsfile.CreateTextNode(nodelabel);
    labelnode.AppendChild(textl);
 
-
    try
      textp:=presetsfile.CreateTextNode(node.FindNode('params').FindNode('#text').NodeValue);
    except
Index: winff-git/unit2.pas
===================================================================
--- winff-git.orig/unit2.pas	2012-05-27 14:13:44.241977032 +0200
+++ winff-git/unit2.pas	2012-05-27 14:13:47.401992699 +0200
@@ -258,141 +258,13 @@
 
 // import a preset
 procedure TfrmEditPresets.importClick(Sender: TObject);
-var
- importfile: txmldocument;
- importedpreset: tdomelement;
- i,j,reply:integer;
- replaceall: boolean = false;
- removepreset: boolean = false;
- nodeexists:boolean = false;
- newnode,labelnode,paramsnode,extensionnode, categorynode,
-  textl,textp,texte, textc, node: tdomnode;
- nodename,nodelabel,nodeext, testchars:string;
 begin
  opendialog1.DefaultExt:='.xml';
  opendialog1.Title:=rsimportpresets;
  opendialog1.Execute;
- if opendialog1.FileName = '' then exit;
- if not fileexists(opendialog1.FileName) then
-    begin
-      showmessage(rsFileDoesNotExist);
-      exit;
-    end;
+ frmMain.importPresetFromFile(opendialog1.FileName); // Procedure in Unit1
     
- try
-  importfile := TXMLdocument.Create;
- except
- end;
- 
- try
-   ReadXMLFile(importfile, opendialog1.FileName);
-   importedpreset:=importfile.DocumentElement;
- except
-  showmessage(rsInvalidPreset);
-  exit;
- end;
-
- if importedpreset.ChildNodes.Count = 0 then exit;
-
- for j:= 0 to importedpreset.ChildNodes.Count -1 do
- begin
-
-   node:= importedpreset.ChildNodes.Item[j];
-
-   nodename:= node.NodeName;
-
-   removepreset:=false;
-   nodeexists:=false;
-   for i:= 0 to presets.ChildNodes.Count -1 do
-     if presets.ChildNodes.Item[i].NodeName = nodename then nodeexists := true;
-
-   if nodeexists then
-     begin
-       if replaceall=false then reply :=  MessageDlg ('Replace Preset', Format(rsPresetAlreadyExist, ['"', nodename, '"']),
-                                            mtConfirmation, [mbYes, mbNo, mbAll, mbCancel],0);
-       if reply=mrCancel then exit;
-       if reply=mrNo then continue;
-       if reply=mrAll then replaceall := true;
-       if (reply=mrYes) or (reply = mrAll) or (replaceall = true) then removepreset:=true;
-       if removepreset then presets.RemoveChild(presets.FindNode(nodename));
-     end;
-
-   try
-     nodelabel := node.FindNode('label').FindNode('#text').NodeValue;
-   except
-     begin
-       showmessage(rsPresetHasNoLabel);
-       exit;
-     end;
-   end;
- 
-   try
-     testchars := node.FindNode('params').FindNode('#text').NodeValue;
-   except
-   end;
-   for i:= 0 to length(testchars)-1 do
-     begin
-       if (testchars[i] = #124) or (testchars[i] = #60) or (testchars[i] = #62) or
-          (testchars[i] = #59) or (testchars[i] = #38) then
-         begin
-          showmessage(rsThePresetHasIllegalChars);
-          exit;
-         end;
-     end;
- 
-
-   for i:= 0 to presets.ChildNodes.Count -1 do
-     if presets.ChildNodes.Item[i].findnode('label').FindNode('#text').NodeValue = nodelabel then
-        begin
-         showmessage(Format(rsPresetWithLabelExists, ['"', nodelabel, '"']));
-         exit;
-        end;
-
-
-   try
-     nodeext := node.FindNode('extension').FindNode('#text').NodeValue;
-   except
-     begin
-       showmessage(rsPresethasnoExt);
-       exit;
-     end;
-   end;
-
-   newnode:=presetsfile.CreateElement(nodename);
-   presets.AppendChild(newnode);
-   labelnode:=presetsfile.CreateElement('label');
-   newnode.AppendChild(labelnode);
-   paramsnode:=presetsfile.CreateElement('params');
-   newnode.AppendChild(paramsnode);
-   extensionnode:=presetsfile.CreateElement('extension');
-   newnode.AppendChild(extensionnode);
-   categorynode:=presetsfile.CreateElement('category');
-   newnode.AppendChild(categorynode);
-
-   textl:=presetsfile.CreateTextNode(nodelabel);
-   labelnode.AppendChild(textl);
-
-   try
-   textp:=presetsfile.CreateTextNode(node.FindNode('params').FindNode('#text').NodeValue);
-   except
-   textp:=presetsfile.CreateTextNode('');
-   end;
-   paramsnode.AppendChild(textp);
-
-   texte:=presetsfile.CreateTextNode(nodeext);
-   extensionnode.AppendChild(texte);
-
-   try
-   textc:=presetsfile.CreateTextNode(node.FindNode('category').FindNode('#text').NodeValue);
-   except
-   textc:=presetsfile.CreateTextNode('');
-   end;
-   categorynode.AppendChild(textc);
-
- end; //for j 1 to childnodes-1
-
  RefreshPresetsBox;
-
 end;
 
 procedure TfrmEditPresets.lbCategoryClick(Sender: TObject);
